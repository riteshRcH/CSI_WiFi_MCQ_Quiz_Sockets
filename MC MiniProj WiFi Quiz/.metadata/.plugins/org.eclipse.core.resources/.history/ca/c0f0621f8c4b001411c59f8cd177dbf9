import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

class LoadQsXML
{
	class Question
	{
		String question, option1, option2, option3, option4, correctAns;
	}
	static ArrayList<Question> qsList = new ArrayList<Question>();
	
	void parseXML(File xmlFile)throws Exception
	{
		SAXParserFactory factory = SAXParserFactory.newInstance();
		SAXParser saxParser = factory.newSAXParser();

        InputStream inputStream= new FileInputStream(xmlFile);
 	    Reader reader = new InputStreamReader(inputStream,"UTF-8");
     	InputSource is = new InputSource(reader);
    	is.setEncoding("UTF-8");
 
		saxParser.parse(is, new DefaultHandler()
		{
			Question q = null;
			String content = null;
			
			@Override
			public void startElement(String uri, String localName, String qName, Attributes attributes)throws SAXException
			{
				q = q==null?(qName.equals("Question")?new Question():null):q;
			}

			@Override
			public void endElement(String uri, String localName, String qName)throws SAXException
			{
				switch(qName)
				{
					case "Question":
						qsList.add(q);
						q = null;
					break;
					
					case "Q":				q.question = content;		break;
					case "Option1":			q.option1 = content;		break;
					case "Option2":			q.option2 = content;		break;
					case "Option3":			q.option3 = content;		break;
					case "Option4":			q.option4 = content;		break;
					case "CorrectAns":		q.correctAns = content;		break;
				}
			}

			@Override
			public void characters(char[] ch, int start, int length)throws SAXException
			{
				content = String.copyValueOf(ch, start, length).trim();
			}
		});
	}
}